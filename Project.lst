Microsoft (R) Macro Assembler Version 14.29.30139.0	    02/27/22 16:10:15
<Arrays, Addressing, and Stack-Passed Parameters     (Proj5_  Page 1 - 1


				TITLE Arrays, Addressing, and Stack-Passed Parameters     (Proj5_songeu.asm)

				; Author: Eugene Song
				; Last Modified: February 27, 2022
				; OSU email address: songeu@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 5             Due Date: February 27, 2022
				; Description: This program will introduce the program and the author. Then it will provide a description
				;					of what the program will do. It will generate 200 random numbers between a range from
				;						10 through 29, sort the list, display the medium value, display the list in ascending 
				;							order and finally display the number of instances of each value in the list. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			ARRAYSIZE = 200
 = 0000000F			LO = 15
 = 00000032			HI = 50 



 00000000			.data

 00000000 54 68 65 20 42		intro1			BYTE	"The Birth of Sorted Random Number Integers! By Eugene",13,10,13,10, 0
	   69 72 74 68 20
	   6F 66 20 53 6F
	   72 74 65 64 20
	   52 61 6E 64 6F
	   6D 20 4E 75 6D
	   62 65 72 20 49
	   6E 74 65 67 65
	   72 73 21 20 42
	   79 20 45 75 67
	   65 6E 65 0D 0A
	   0D 0A 00
 0000003A 54 68 69 73 20		intro2			BYTE	"This program's objective is to pump out 200 random integers from 15 through 50. It will display ",13,10
	   70 72 6F 67 72
	   61 6D 27 73 20
	   6F 62 6A 65 63
	   74 69 76 65 20
	   69 73 20 74 6F
	   20 70 75 6D 70
	   20 6F 75 74 20
	   32 30 30 20 72
	   61 6E 64 6F 6D
	   20 69 6E 74 65
	   67 65 72 73 20
	   66 72 6F 6D 20
	   31 35 20 74 68
	   72 6F 75 67 68
	   20 35 30 2E 20
	   49 74 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 0D 0A
 0000009C  61 6E 64 20 73						BYTE	"and sort the original list containing the integers, display its median value, then rearrange ",13,10
	   6F 72 74 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 20 63 6F 6E
	   74 61 69 6E 69
	   6E 67 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 64 69 73
	   70 6C 61 79 20
	   69 74 73 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 2C 20 74 68
	   65 6E 20 72 65
	   61 72 72 61 6E
	   67 65 20 0D 0A
 000000FB  61 6E 64 20 6F						BYTE	"and output the list in ascending order and finally show the number of instances of each ",13,10 
	   75 74 70 75 74
	   20 74 68 65 20
	   6C 69 73 74 20
	   69 6E 20 61 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 20 61
	   6E 64 20 66 69
	   6E 61 6C 6C 79
	   20 73 68 6F 77
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   69 6E 73 74 61
	   6E 63 65 73 20
	   6F 66 20 65 61
	   63 68 20 0D 0A
 00000155  67 65 6E 65 72						BYTE	"generated value, starting with the number of 10s.",13,10,13,10,0
	   61 74 65 64 20
	   76 61 6C 75 65
	   2C 20 73 74 61
	   72 74 69 6E 67
	   20 77 69 74 68
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   31 30 73 2E 0D
	   0A 0D 0A 00
 0000018B 59 6F 75 72 20		unsorted_label	BYTE	"Your unsorted random numbers:",13,10, 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001AB 54 68 65 20 6D		median_label	BYTE	"The median value of the array: ",0 
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000001CB 59 6F 75 72 20		sorted_label	BYTE	"Your sorted random numbers:", 13,10, 0 
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 0D 0A 00
 000001E9 59 6F 75 72 20		instance_label	BYTE	"Your list of instances of each generated number, starting with the number of 15s:",13,10, 0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 31 35 73
	   3A 0D 0A 00
 0000023D 47 6F 6F 64 62		farewell_msg	BYTE	"Goodbye, and thanks for coming!", 13,10, 0 
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 63
	   6F 6D 69 6E 67
	   21 0D 0A 00
 0000025F 20 00				space			BYTE	" ", 0 

 00000261  000000C8 [			randArray		DWORD	ARRAYSIZE DUP (?)	
	    00000000
	   ]
 00000581 000000C8			arrayCount		DWORD	LENGTHOF randArray	
 00000585 00000014			numPerLine		DWORD	20
 00000589  00000024 [			counts			DWORD	HI-LO+1 DUP(?)
	    00000000
	   ]


 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E		CALL	Randomize				; random seed 
					
					; introduction
 00000005  68 00000000 R		PUSH	OFFSET intro1			; push intro1 to stack
 0000000A  68 0000003A R		PUSH	OFFSET intro2			; push intro2 to stack
 0000000F  E8 0000009D			CALL	introduction

					; fill array first
 00000014  FF 35 00000581 R		PUSH	arrayCount			
 0000001A  68 00000261 R		PUSH	OFFSET randArray		; push empty array onto stack
 0000001F  E8 000000AA			CALL	fillArray

					; display unsorted random nums 
 00000024  68 0000018B R		PUSH	OFFSET unsorted_label
 00000029  68 00000261 R		PUSH	OFFSET randArray
 0000002E  68 0000025F R		PUSH	OFFSET space
 00000033  FF 35 00000585 R		PUSH	numPerLine
 00000039  E8 000000D6			CALL	displayList
					
					; sort list before outputting the median value
 0000003E  68 00000261 R		PUSH	OFFSET randArray
 00000043  FF 35 00000581 R		PUSH	arrayCount
 00000049  E8 0000010F			CALL	sortList

					; display the median value of sorted random nums
 0000004E  68 000001AB R		PUSH	OFFSET median_label
 00000053  68 00000261 R		PUSH	OFFSET randArray
 00000058  E8 0000015B			CALL	displayMedian 

					; display sorted random nums
 0000005D  68 000001CB R		PUSH	OFFSET sorted_label
 00000062  68 00000261 R		PUSH	OFFSET randArray
 00000067  68 0000025F R		PUSH	OFFSET space
 0000006C  FF 35 00000585 R		PUSH	numPerLine
 00000072  E8 0000009D			CALL	displayList
					
					; generate new array of counts
 00000077  68 00000261 R		PUSH	OFFSET randArray
 0000007C  68 00000589 R		PUSH	OFFSET counts
 00000081  E8 00000199			CALL	countList 

					; display the new array of counts
 00000086  68 000001E9 R		PUSH	OFFSET instance_label
 0000008B  68 00000589 R		PUSH	OFFSET counts
 00000090  68 0000025F R		PUSH	OFFSET space
 00000095  FF 35 00000585 R		PUSH	numPerLine
 0000009B  E8 00000074			CALL	displayList

					; display good bye msg
 000000A0  68 0000023D R		PUSH	OFFSET farewell_msg
 000000A5  E8 000001BB			CALL	goodBye
					
					Invoke ExitProcess,0			; exit to operating system
 000000AA  6A 00	   *	    push   +000000000h
 000000AC  E8 00000000 E   *	    call   ExitProcess
 000000B1			main ENDP

 000000B1			introduction PROC

 000000B1  55				PUSH	EBP						; Step 1) Preserve EBP
 000000B2  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer

 000000B4  8B 54 24 0C			MOV		EDX, [ESP+12]			; move +12 bytes from ESP to store intro1  [base + offset] 
 000000B8  E8 00000000 E		CALL	WriteString
 000000BD  33 D2			XOR		EDX, EDX
 000000BF  8B 54 24 08			MOV		EDX, [ESP+8]			; move +8 bytes from ESP to store intro2	[base + offset]
 000000C3  E8 00000000 E		CALL	WriteString
 000000C8  33 D2			XOR		EDX, EDX
					
 000000CA  5D				POP		EBP
 000000CB  C2 0008			RET		8						; clears pre-call introduction parameters [stack pointer reset]

 000000CE			introduction ENDP

 000000CE			fillArray PROC

 000000CE  55				PUSH	EBP						; Step 1) Preserve EBP
 000000CF  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer

					; generate arraySize-n random numbers

 000000D1  33 C9			XOR		ECX, ECX
 000000D3			_loopMe:

 000000D3  B8 00000032			MOV		EAX, HI					; upper bound
 000000D8  83 C0 01			ADD		EAX, 1					; EAX + 1 to include upper range
 000000DB  E8 00000000 E		CALL	RandomRange				; takes EAX (upper); outputs new EAX 
 000000E0  BB 0000000F			MOV		EBX, LO
 000000E5  50				PUSH	EAX						; store seed value --> stack
 000000E6  B8 00000032			MOV		EAX, HI
 000000EB  83 C0 01			ADD		EAX, 1					; to include upper range again
 000000EE  2B C3			SUB		EAX, EBX				; upper - lower --> EAX

						; switch EAX / EBX to prepare for div
 000000F0  8B D8			MOV		EBX, EAX
 000000F2  58				POP		EAX						; popped off seed --> EAX 

						; EAX (seed) / EBX (upper-lower) at this point
 000000F3  33 D2			XOR		EDX, EDX
 000000F5  F7 F3			DIV		EBX						; randomNum = seed % (upper-lower) + lower

 000000F7  BB 0000000F			MOV		EBX, LO
 000000FC  03 D3			ADD		EDX, EBX		

						; at this point, EDX has the randomNum btwn LO & HI

 000000FE  8B C2			MOV		EAX, EDX				; EAX has randomNum btwn LO & HI

					; store/fill in array
 00000100  8B 7C 24 08			MOV		EDI, [ESP+8]			; reference 1st address of randArray
 00000104  89 04 8F			MOV		[EDI + ECX * 4], EAX	; algorithm to store into each index of array 
 00000107  8B 5C 24 0C			MOV		EBX, [ESP+12]			; move arrayCount --> EBX
 0000010B  41				INC		ECX

					; compare to array length
 0000010C  3B CB			CMP		ECX, EBX					
 0000010E  75 C3			JNE		_loopMe					; if counter < array.length(randArray)

 00000110  5D				POP		EBP
 00000111  C2 000C			RET		12
						
 00000114			fillArray ENDP

 00000114			displayList PROC

				; ONLY ONE DISPLAYLIST PROC for 3 different arrays to print; therefore universally PUSH labels / values the 


 00000114  55				PUSH	EBP						; Step 1) Preserve EBP
 00000115  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer

					; STACK
					; --------------------------
					; POP EBP
					; RET ADDRESS
					; NUM PER LINE
					; OFFSET SPACE (" ")
					; OFFSET ARRAY
					; OFFSET LABEL

 00000117  8B 54 24 14			MOV		EDX, [ESP+20]			; LABEL OFFSET IS ALWAYS @ BOTTOM MOST OF STACK			
 0000011B  E8 00000000 E		CALL	WriteString
 00000120  33 C9			XOR		ECX, ECX				; cleared ECX to start iteration

 00000122  8B 7C 24 10			MOV		EDI, [ESP+16]			; reference 1st address of filled randArray into EDI

					; begin iterating through and printing each value of array
 00000126			_displayLoop:
 00000126  8B 04 8F			MOV		EAX, [EDI + ECX * 4]	; store each value of array into EAX to print
 00000129  E8 00000000 E		CALL	WriteDec
 0000012E  8B 54 24 0C			MOV		EDX, [ESP+12]			; create space after each number
 00000132  E8 00000000 E		CALL	WriteString

 00000137  33 D2			XOR		EDX, EDX				; clear EDX to use in DIV

 00000139  41				INC		ECX						; increment counter each time num is displayed

					; insert new lines here 

 0000013A  8B 5C 24 08			MOV		EBX, [ESP+8]			; store numPerLine into EBX to use as divisor
													; compare numPerLine after printing first num
 0000013E  8B C1			MOV		EAX, ECX 
 00000140  F7 F3			DIV		EBX
 00000142  83 FA 00			CMP		EDX, 0

 00000145  75 05			JNE		_keepPrinting			; if remainder != 0 (IE...20 does not divide index of printed num) 
 00000147  E8 00000000 E		CALL	CrLf

 0000014C			_keepPrinting:
					; check whether # displayed is == length array
 0000014C  81 F9 000000C8		CMP		ECX, ARRAYSIZE
 00000152  75 D2			JNE		_displayLoop

 00000154  5D				POP		EBP
 00000155  E8 00000000 E		CALL	CrLf
 0000015A  C2 0010			RET		16

 0000015D			displayList	ENDP

 0000015D			sortList PROC

					; BUBBLE SORT (n^2) 
					; NESTED LOOP

 0000015D  55				PUSH	EBP						; Step 1) Preserve EBP
 0000015E  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer

 00000160  8B 4C 24 08			MOV		ECX, [ESP+8]			; store outer loop counter for bubble sort  
					
 00000164			_outerLoop: ; do nothing except iterate through each index once 
					
 00000164  8B 74 24 0C			MOV		ESI, [ESP+12]			; syntax: MOV ESI, source_address (reference of first value) 
 00000168  8B D1			MOV		EDX, ECX				; stores ECX value into EDX 

 0000016A  8B 4C 24 08			MOV		ECX, [ESP+8]			; reset ECX's value to 200 after each outer iteration

 0000016E			_innerLoop:	

					; address of index 0 of filled array
 0000016E  8B 06			MOV		EAX, [ESI]				; store first value into EAX to compare
 00000170  8B 5E 04			MOV		EBX, [ESI+4]			; store second value into EBX to compare

 00000173  3B C3			CMP		EAX, EBX
 00000175  7E 12			JLE		_goBackUp

					
 00000177  56				PUSH	ESI						; push element one reference
 00000178  83 C6 04			ADD		ESI,4
 0000017B  56				PUSH	ESI						; push element two reference
 0000017C  83 EE 04			SUB		ESI, 4					; reset value of ESI for inner loop
					
 0000017F  89 1E			MOV		[ESI], EBX
 00000181  89 46 04			MOV		[ESI+4], EAX

					; swap elements
 00000184  E8 00000012			CALL	exchangeElements
					
 00000189			_goBackUp:

 00000189  83 C6 04			ADD		ESI, 4					; increment by 4 memory addresses once nums have been checked
 0000018C  83 F9 01			CMP		ECX, 1h				; only want to iterate through innerLoop 199 times so I don't go out of array range
 0000018F  74 02			JE		_exitInner
 00000191  E2 DB			LOOP	_innerLoop				

 00000193			_exitInner:

 00000193  8B CA			MOV		ECX, EDX
 00000195  E2 CD			LOOP	_outerLoop

 00000197  5D				POP		EBP
 00000198  C2 0008			RET		8

 0000019B			sortList ENDP

 0000019B			exchangeElements PROC

 0000019B  55				PUSH	EBP							; standard ebp push
 0000019C  8B EC			MOV		EBP, ESP					; standard static base pointer
 0000019E  8B 44 24 0C			MOV		EAX, [ESP+12]				; grab ESI location 
 000001A2  8B 5C 24 08			MOV		EBX, [ESP+8]				; grab ESI + 4 location 

				; turn EAX / EBX into their stack location's values 
 000001A6  50				PUSH	EAX
 000001A7  8B 03			MOV		EAX, [EBX]
 000001A9  5B				POP		EBX
 000001AA  50				PUSH	EAX
 000001AB  8B 03			MOV		EAX, [EBX]
 000001AD  5B				POP		EBX

				; exchange the two values 
 000001AE  93				XCHG	EBX, EAX

				; store back into respective array slots
 000001AF  89 46 04			MOV		[ESI+4], EAX
 000001B2  89 1E			MOV		[ESI], EBX

 000001B4  5D				POP		EBP
 000001B5  C2 0008			RET		8
 000001B8			exchangeElements ENDP

 000001B8			displayMedian PROC

 000001B8  55				PUSH	EBP						; Step 1) Preserve EBP
 000001B9  8B EC			MOV		EBP, ESP				; Step 2) Assign static stack-frame pointer

 000001BB  8B 55 0C			MOV		EDX, [EBP+12]			
 000001BE  E8 00000000 E		CALL	WriteString

					; check length of array size
 000001C3  33 D2			XOR		EDX, EDX				; clear EDX to use for div
 000001C5  B8 000000C8			MOV		EAX, ARRAYSIZE	
 000001CA  BB 00000002			MOV		EBX, 2
 000001CF  F7 F3			DIV		EBX						 

 000001D1  83 FA 00			CMP		EDX, 0
 000001D4  74 11			JE		_evenNum

					; do odd
 000001D6  33 D2			XOR		EDX, EDX
 000001D8  8B 7C 24 08			MOV		EDI, [ESP+8]			; reference 1st address of filled randArray into EDI
 000001DC  48				DEC		EAX
 000001DD  8B 04 87			MOV		EAX, [EDI + EAX * 4]	; move [4 x index number] places in the array (middle value since odd)
 000001E0  E8 00000000 E		CALL	WriteDec							
 000001E5  EB 2A			JMP		_finish

 000001E7			_evenNum:
					; do even
 000001E7  33 D2			XOR		EDX, EDX
 000001E9  8B 7C 24 08			MOV		EDI, [ESP+8]			; reference 1st address of filled randArray into EDI
 000001ED  50				PUSH	EAX
 000001EE  48				DEC		EAX
 000001EF  8B 04 87			MOV		EAX, [EDI + EAX * 4]	;  store (arrayCount / 2)-nth index value 
 000001F2  5B				POP		EBX
 000001F3  8B 1C 9F			MOV		EBX, [EDI + EBX * 4]	; store (arrayCount / 2 + 1)- nth index value

 000001F6  03 C3			ADD		EAX, EBX 
 000001F8  BB 00000002			MOV		EBX, 2
 000001FD  F7 F3			DIV		EBX

 000001FF  83 FA 00			CMP		EDX, 0
 00000202  74 08			JE		_noAdd
 00000204  40				INC		EAX						; half- round up here 
 00000205  E8 00000000 E		CALL	WriteDec
 0000020A  EB 05			JMP		_finish

 0000020C			_noAdd:
 0000020C  E8 00000000 E		CALL	WriteDec

 00000211			_finish:

 00000211  E8 00000000 E		CALL	CrLf
 00000216  E8 00000000 E		CALL	CrLf
 0000021B  5D				POP		EBP
 0000021C  C2 0008			RET		8

 0000021F			displayMedian ENDP





 0000021F			countList PROC

 0000021F  55				PUSH	EBP
 00000220  8B EC			MOV		EBP, ESP

 00000222  8B 7D 08			MOV		EDI, [EBP+8]					; reference countArray address 0 (EDI)
 00000225  8B 75 0C			MOV		ESI, [EBP+12]					; reference randArray address 0 (ESI)			

 00000228  BB 00000000			MOV		EBX, 0							
 0000022D  53				PUSH	EBX
					
 0000022E  B8 0000000F			MOV		EAX, LO
 00000233  BB 00000000			MOV		EBX, 0							; initialize counter (EBX)
 00000238  B9 00000000			MOV		ECX, 0					; # times I loop when checking occurence of each value

					; BLOCK OF CODE TO ITERATE THRU randArray and compare value of first element in EAX
 0000023D			_top:

 0000023D  3B 04 8E			CMP		EAX, [ESI+ECX*4]

					; code for if EAX is equal to the value we check
 00000240  75 01			JNE		_middle
 00000242  43				INC		EBX								; counter++ if EAX == ESI+ECX*4
					
 00000243			_middle:

					; block of code to replace EDI (countArray)

 00000243  41				INC		ECX
 00000244  81 F9 000000C8		CMP		ECX, ARRAYSIZE
 0000024A  75 F1			JNE		_top							; check only from 0 through ARRAYCOUNT b/c [ESI] is index 0

 0000024C  33 C9			XOR		ECX, ECX						; clear ECX since we've already looped thru entire randArray to check

					; code to store EBX (# of counts) into countArray

					; THIS POINT: HAVE EBX = number of counts 
 0000024E  59				POP		ECX
 0000024F  89 1C 8F			MOV		[EDI+ECX*4], EBX				;each time <-- counter == # of indices 
 00000252  41				INC		ECX
 00000253  51				PUSH	ECX

 00000254			_nextNum:

 00000254  40				INC		EAX								; holds LO through HI
 00000255  33 DB			XOR		EBX, EBX						; clear EBX (counter) to use for next num 

 00000257  BA 00000032			MOV		EDX, HI
 0000025C  3B C2			CMP		EAX, EDX
 0000025E  7E DD			JNG		_top							; or maybe _middle
															; use (jmp not greater) b/c INC EBX will 50 -> 51 then check 50 
 00000260			_finish:

 00000260  5B				POP		EBX
 00000261  5D				POP		EBP
 00000262  C2 0008			RET		8

 00000265			countList ENDP

 00000265			goodBye PROC

 00000265  55				PUSH	EBP
 00000266  8B EC			MOV		EBP, ESP

 00000268  33 D2			XOR		EDX, EDX
 0000026A  8B 54 24 08			MOV		EDX, [ESP+8]
 0000026E  E8 00000000 E		CALL	WriteString
					
 00000273  5D				POP		EBP
 00000274  C2 0004			RET		4

 00000277			goodBye ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    02/27/22 16:10:15
<Arrays, Addressing, and Stack-Passed Parameters     (Proj5_  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000619 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000277 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 0000021F _TEXT	Length= 00000046 Public STDCALL
  _top . . . . . . . . . . . . .	L Near	 0000023D _TEXT	
  _middle  . . . . . . . . . . .	L Near	 00000243 _TEXT	
  _nextNum . . . . . . . . . . .	L Near	 00000254 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000260 _TEXT	
displayList  . . . . . . . . . .	P Near	 00000114 _TEXT	Length= 00000049 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 00000126 _TEXT	
  _keepPrinting  . . . . . . . .	L Near	 0000014C _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001B8 _TEXT	Length= 00000067 Public STDCALL
  _evenNum . . . . . . . . . . .	L Near	 000001E7 _TEXT	
  _noAdd . . . . . . . . . . . .	L Near	 0000020C _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000211 _TEXT	
exchangeElements . . . . . . . .	P Near	 0000019B _TEXT	Length= 0000001D Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000CE _TEXT	Length= 00000046 Public STDCALL
  _loopMe  . . . . . . . . . . .	L Near	 000000D3 _TEXT	
goodBye  . . . . . . . . . . . .	P Near	 00000265 _TEXT	Length= 00000012 Public STDCALL
introduction . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 0000001D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B1 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000015D _TEXT	Length= 0000003E Public STDCALL
  _outerLoop . . . . . . . . . .	L Near	 00000164 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 0000016E _TEXT	
  _goBackUp  . . . . . . . . . .	L Near	 00000189 _TEXT	
  _exitInner . . . . . . . . . .	L Near	 00000193 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCount . . . . . . . . . . .	DWord	 00000581 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counts . . . . . . . . . . . . .	DWord	 00000589 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_msg . . . . . . . . . .	Byte	 0000023D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instance_label . . . . . . . . .	Byte	 000001E9 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000003A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median_label . . . . . . . . . .	Byte	 000001AB _DATA	
numPerLine . . . . . . . . . . .	DWord	 00000585 _DATA	
randArray  . . . . . . . . . . .	DWord	 00000261 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_label . . . . . . . . . .	Byte	 000001CB _DATA	
space  . . . . . . . . . . . . .	Byte	 0000025F _DATA	
unsorted_label . . . . . . . . .	Byte	 0000018B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
